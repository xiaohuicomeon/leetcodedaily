class Solution:
    def rotate(self, matrix: List[List[int]]) -> None:
        """
        Do not return anything, modify matrix in-place instead.
        """
        """
        这里使用了递归方法去做，属于硬转"""
        def func(a, n):
        
            if n == 1:
                return a
            if n == 2:
                temp = a[0][0]
                a[0][0] = a[1][0]
                a[1][0] = a[1][1]
                a[1][1] = a[0][1]
                a[0][1] = temp
                return a 

            # 左边 ---> 上边
            temp = a[0][:]
            for i in range(n-1):
                a[0][n-1-i] = a[i][0]

            # 下边 ---> 左边
            for i in range(n-1):
                a[i][0] = a[n-1][i]

            # 右边 ---> 下边
            for i in range(1, n):
                a[n-1][n-i-1] = a[i][n-1]         

            # 上边 ---> 右边
            for i in range(1, n):
                a[i][n-1] = temp[i]

            # 
            temp = []
            for i in range(1,n-1):
                line = a[i]
                temp.append(line[1:n-1])
            temp = func(temp, n-2)

            for i in range(len(temp)):
                a[1+i][1:n-1] = temp[i] 
            return a
        
        matrix = func(matrix, len(matrix[0]))
        return matrix


# 巧妙的方法： 首先转置， 然后倒置每一行即可
class Solution:
    def rotate(self, matrix: List[List[int]]) -> None:
        """
        Do not return anything, modify matrix in-place instead.
        """
        n=len(matrix)
        for i in range(n-1):   # j==n-1的时候已经转置了最后一层
            for j in range(i+1,n):
                matrix[i][j],matrix[j][i]=matrix[j][i],matrix[i][j]
        for m in range(n):
            matrix[m]=list(reversed(matrix[m]))   # time:20ms
	    # matrix[m] = matrix[m][::-1]   # time:32ms
        return matrix
