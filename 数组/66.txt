class Solution:
    def plusOne(self, digits: List[int]) -> List[int]:
        n = len(digits)
        ind = n-2
        flag = (digits[-1] + 1) // 10
        digits[-1] = (digits[-1] + 1) % 10
        
        while flag and ind >= 0:
            digits[ind] += flag
            flag = digits[ind] // 10
            digits[ind] %= 10
            ind = ind - 1 
        if flag and ind == -1:
            digits = [1] + digits
        return digits



# 下面这个更快的原因在于避免每次计算是否进位。
class Solution:
    def plusOne(self, digits: List[int]) -> List[int]:
        index=len(digits)-1
        while(digits[index]==9):   # 这里避免了每次进行进位
            digits[index]=0
            index-=1
            if index==-1:
                digits[index+1]=1
                digits.append(0)
                return digits
        digits[index]+=1
        return digits

# 下面这个利用python方便的特性。但是这种操作比较慢，因为map操作需要遍历一遍整个数组
class Solution:
    def plusOne(self, digits:List[int]) -> List[int]:
	return list(str(int(''.join(map(str, digits)))+1))

